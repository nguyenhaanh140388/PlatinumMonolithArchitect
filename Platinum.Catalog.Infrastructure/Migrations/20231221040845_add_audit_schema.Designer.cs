// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Platinum.Catalog.Core.Entities;

#nullable disable

namespace Platinum.Catalog.Infrastructure.Migrations
{
    [DbContext(typeof(PlatinumCatalogContext))]
    [Migration("20231221040845_add_audit_schema")]
    partial class add_audit_schema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.AddressBook", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("company");

                    b.Property<Guid?>("Countryid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("countryid");

                    b.Property<Guid?>("Customerid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerid");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Postalcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postalcode");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Streetaddress")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("streetaddress");

                    b.HasKey("Id");

                    b.HasIndex("Customerid");

                    b.ToTable("AddressBook", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Addedon")
                        .HasColumnType("datetime")
                        .HasColumnName("addedon");

                    b.Property<Guid?>("Customerid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerid");

                    b.Property<decimal>("Finalprice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("finalprice");

                    b.Property<Guid?>("Productid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productid");

                    b.Property<int>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("qty");

                    b.HasKey("Id");

                    b.HasIndex("Customerid");

                    b.HasIndex("Productid");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.CartAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("Customerid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerid");

                    b.Property<Guid?>("Productid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productid");

                    b.Property<Guid?>("Productoptionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productoptionid");

                    b.Property<Guid?>("Productoptionvalueid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productoptionvalueid");

                    b.HasKey("Id");

                    b.HasIndex("Customerid");

                    b.HasIndex("Productid");

                    b.HasIndex("Productoptionid");

                    b.HasIndex("Productoptionvalueid");

                    b.ToTable("CartAttributes");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Addedon")
                        .HasColumnType("datetime")
                        .HasColumnName("addedon");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("image");

                    b.Property<DateTime>("Modifiedon")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<Guid?>("Parentcatid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parentcatid");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("Configurationgroupid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("configurationgroupid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("key");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedOn");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("title");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Configurationgroupid");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ConfigurationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationGroup", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("Currencyid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Isocode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("ISOCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Currencyid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<string>("Symboleleft")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("symboleleft");

                    b.Property<string>("Symbolright")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("symbolright");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fax");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.Property<Guid?>("Mainaddressid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("mainaddressid");

                    b.Property<bool>("Newsletteropted")
                        .HasColumnType("bit")
                        .HasColumnName("newsletteropted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.CustomerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Accountcreatedon")
                        .HasColumnType("datetime")
                        .HasColumnName("accountcreatedon");

                    b.Property<Guid?>("Customerid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerid");

                    b.Property<DateTime>("Lastlogon")
                        .HasColumnType("datetime")
                        .HasColumnName("lastlogon");

                    b.Property<DateTime>("Lastmodifiedon")
                        .HasColumnType("datetime")
                        .HasColumnName("lastmodifiedon");

                    b.Property<int>("Logoncount")
                        .HasColumnType("int")
                        .HasColumnName("logoncount");

                    b.HasKey("Id");

                    b.HasIndex("Customerid");

                    b.ToTable("CustomerInfo", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ManufacturersInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Addedon")
                        .HasColumnType("datetime")
                        .HasColumnName("addedon");

                    b.Property<Guid?>("Manufacturerid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("manufacturerid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("Manufacturerid");

                    b.ToTable("ManufacturersInfo", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("currency");

                    b.Property<decimal>("CurrencyValue")
                        .HasColumnType("decimal(16, 6)")
                        .HasColumnName("currency_value");

                    b.Property<string>("CustomerStreetaddress")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("customerStreetaddress");

                    b.Property<string>("Customercity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customercity");

                    b.Property<string>("Customercountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customercountry");

                    b.Property<string>("Customeremail")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)")
                        .HasColumnName("customeremail");

                    b.Property<Guid?>("Customerid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerid");

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("customername");

                    b.Property<string>("Customerpostalcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customerpostalcode");

                    b.Property<string>("Customerstate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customerstate");

                    b.Property<string>("Customertelephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customertelephone");

                    b.Property<DateTime>("Datepurcahsed")
                        .HasColumnType("datetime")
                        .HasColumnName("datepurcahsed");

                    b.Property<string>("Deliverycity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deliverycity");

                    b.Property<string>("Deliverycountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deliverycountry");

                    b.Property<string>("Deliveryname")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("deliveryname");

                    b.Property<string>("Deliverypostalcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deliverypostalcode");

                    b.Property<string>("Deliverystate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deliverystate");

                    b.Property<string>("Deliverystreetaddress")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("deliverystreetaddress");

                    b.Property<DateTime>("Latsmodified")
                        .HasColumnType("datetime")
                        .HasColumnName("latsmodified");

                    b.Property<DateTime>("Orderdatefinished")
                        .HasColumnType("datetime")
                        .HasColumnName("orderdatefinished");

                    b.Property<string>("Orderstatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("orderstatus");

                    b.Property<Guid?>("Paymentmethodid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paymentmethodid");

                    b.Property<Guid?>("Shipingmethodid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("shipingmethodid");

                    b.Property<decimal?>("Shippingcost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("shippingcost");

                    b.HasKey("Id");

                    b.HasIndex("Customerid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.OrderProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Optionvalueprice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("optionvalueprice");

                    b.Property<Guid?>("Orderid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderid");

                    b.Property<Guid?>("Orderproductid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderproductid");

                    b.Property<string>("PricePrefix")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("price_prefix")
                        .IsFixedLength();

                    b.Property<string>("Productoptiobvalue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productoptiobvalue");

                    b.Property<string>("Productoptions")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productoptions");

                    b.HasKey("Id");

                    b.HasIndex("Orderid");

                    b.HasIndex("Orderproductid");

                    b.ToTable("OrderProductAttributes");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.OrdersProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Finalprice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("finalprice");

                    b.Property<Guid?>("Orderid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderid");

                    b.Property<Guid>("Productid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productid");

                    b.Property<string>("Productname")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("productname");

                    b.Property<decimal>("Productprice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("productprice");

                    b.Property<int>("Productqty")
                        .HasColumnType("int")
                        .HasColumnName("productqty");

                    b.Property<decimal>("Productstax")
                        .HasColumnType("decimal(9, 4)")
                        .HasColumnName("productstax");

                    b.HasKey("Id");

                    b.HasIndex("Orderid");

                    b.HasIndex("Productid");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.OrdersStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("OrdersStatus", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Addedon")
                        .HasColumnType("datetime")
                        .HasColumnName("addedon");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("image");

                    b.Property<Guid?>("ManufactureId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("manufactureId");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("model");

                    b.Property<DateTime>("Modifiedon")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedon");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("qty");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<Guid?>("Taxclassid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("taxclassid");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(7, 2)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ProductsAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("Optionsid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("optionsid");

                    b.Property<Guid?>("Optionvaluesid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("optionvaluesid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("PricePrefix")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("price_prefix")
                        .IsFixedLength();

                    b.Property<Guid?>("Productsid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productsid");

                    b.HasKey("Id");

                    b.HasIndex("Optionsid");

                    b.HasIndex("Optionvaluesid");

                    b.HasIndex("Productsid");

                    b.ToTable("ProductsAttributes");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ProductsOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ProductsOptions");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ProductsOptionsValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ProductsOptionsValues");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ProductsOptionsValuesMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("Optionsid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("optionsid");

                    b.Property<Guid?>("Valuesid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("valuesid");

                    b.HasKey("Id");

                    b.HasIndex("Optionsid");

                    b.HasIndex("Valuesid");

                    b.ToTable("ProductsOptionsValuesMappings");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Productsdetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("name");

                    b.Property<Guid?>("Productid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("url");

                    b.Property<int>("Views")
                        .HasColumnType("int")
                        .HasColumnName("views");

                    b.HasKey("Id");

                    b.HasIndex("Productid");

                    b.ToTable("productsdetail", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Addedon")
                        .HasColumnType("datetime")
                        .HasColumnName("addedon");

                    b.Property<Guid?>("Customerid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerid");

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("customername");

                    b.Property<DateTime>("Modifiedon")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedon");

                    b.Property<Guid?>("Productid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productid");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.HasIndex("Productid");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ReviewsDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("Reviewid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reviewid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("Reviewid");

                    b.ToTable("ReviewsDetail", (string)null);
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.WhoIsOnline", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("fullname");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Lastpageurl")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasColumnName("lastpageurl");

                    b.Property<string>("Sessionid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sessionid");

                    b.Property<DateTime>("Timeentry")
                        .HasColumnType("datetime")
                        .HasColumnName("timeentry");

                    b.HasKey("Id");

                    b.ToTable("WhoIsOnline", (string)null);
                });

            modelBuilder.Entity("Platinum.Core.Entities.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.AddressBook", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Customer", "Customer")
                        .WithMany("AddressBooks")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_AddressBook_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Cart", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_Cart_Customers");

                    b.HasOne("Platinum.Catalog.Core.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_Cart_Products");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.CartAttribute", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Customer", "Customer")
                        .WithMany("CartAttributes")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_CartAttributes_Customers");

                    b.HasOne("Platinum.Catalog.Core.Entities.Product", "Product")
                        .WithMany("CartAttributes")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_CartAttributes_Products");

                    b.HasOne("Platinum.Catalog.Core.Entities.ProductsOption", "Productoption")
                        .WithMany("CartAttributes")
                        .HasForeignKey("Productoptionid")
                        .HasConstraintName("FK_CartAttributes_ProductsOptions");

                    b.HasOne("Platinum.Catalog.Core.Entities.ProductsOptionsValue", "Productoptionvalue")
                        .WithMany("CartAttributes")
                        .HasForeignKey("Productoptionvalueid")
                        .HasConstraintName("FK_CartAttributes_ProductsOptionsValues");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Productoption");

                    b.Navigation("Productoptionvalue");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Configuration", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.ConfigurationGroup", "Configurationgroup")
                        .WithMany("Configurations")
                        .HasForeignKey("Configurationgroupid")
                        .HasConstraintName("FK_Configuration_ConfigurationGroup");

                    b.Navigation("Configurationgroup");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Country", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("Currencyid")
                        .HasConstraintName("FK_Countries_Currencies");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.CustomerInfo", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Customer", "Customer")
                        .WithMany("CustomerInfos")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_CustomerInfo_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ManufacturersInfo", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Manufacturer", "Manufacturer")
                        .WithMany("ManufacturersInfos")
                        .HasForeignKey("Manufacturerid")
                        .HasConstraintName("FK_ManufacturersInfo_Manufacturers");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Order", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_Orders_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.OrderProductAttribute", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Order", "Order")
                        .WithMany("OrderProductAttributes")
                        .HasForeignKey("Orderid")
                        .HasConstraintName("FK_OrderProductAttributes_Orders");

                    b.HasOne("Platinum.Catalog.Core.Entities.OrdersProduct", "Orderproduct")
                        .WithMany("OrderProductAttributes")
                        .HasForeignKey("Orderproductid")
                        .HasConstraintName("FK_OrderProductAttributes_OrderProductAttributes");

                    b.Navigation("Order");

                    b.Navigation("Orderproduct");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.OrdersProduct", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Order", "Order")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("Orderid")
                        .HasConstraintName("FK_OrdersProducts_Orders");

                    b.HasOne("Platinum.Catalog.Core.Entities.Product", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("Productid")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersProducts_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ProductsAttribute", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.ProductsOption", "Options")
                        .WithMany("ProductsAttributes")
                        .HasForeignKey("Optionsid")
                        .HasConstraintName("FK_ProductsAttributes_ProductsOptions");

                    b.HasOne("Platinum.Catalog.Core.Entities.ProductsOptionsValue", "Optionvalues")
                        .WithMany("ProductsAttributes")
                        .HasForeignKey("Optionvaluesid")
                        .HasConstraintName("FK_ProductsAttributes_ProductsOptionsValues");

                    b.HasOne("Platinum.Catalog.Core.Entities.Product", "Products")
                        .WithMany("ProductsAttributes")
                        .HasForeignKey("Productsid")
                        .HasConstraintName("FK_ProductsAttributes_Products");

                    b.Navigation("Options");

                    b.Navigation("Optionvalues");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ProductsOptionsValuesMapping", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.ProductsOption", "Options")
                        .WithMany("ProductsOptionsValuesMappings")
                        .HasForeignKey("Optionsid")
                        .HasConstraintName("FK_ProductsOptionsValuesMappings_productsdetail");

                    b.HasOne("Platinum.Catalog.Core.Entities.ProductsOptionsValue", "Values")
                        .WithMany("ProductsOptionsValuesMappings")
                        .HasForeignKey("Valuesid")
                        .HasConstraintName("FK_ProductsOptionsValuesMappings_ProductsOptionsValues");

                    b.Navigation("Options");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Productsdetail", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Product", "Product")
                        .WithMany("Productsdetails")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_productsdetail_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Review", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_Reviews_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ReviewsDetail", b =>
                {
                    b.HasOne("Platinum.Catalog.Core.Entities.Review", "Review")
                        .WithMany("ReviewsDetails")
                        .HasForeignKey("Reviewid")
                        .HasConstraintName("FK_ReviewsDetail_Reviews");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ConfigurationGroup", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Currency", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Customer", b =>
                {
                    b.Navigation("AddressBooks");

                    b.Navigation("CartAttributes");

                    b.Navigation("Carts");

                    b.Navigation("CustomerInfos");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Manufacturer", b =>
                {
                    b.Navigation("ManufacturersInfos");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderProductAttributes");

                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.OrdersProduct", b =>
                {
                    b.Navigation("OrderProductAttributes");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Product", b =>
                {
                    b.Navigation("CartAttributes");

                    b.Navigation("Carts");

                    b.Navigation("OrdersProducts");

                    b.Navigation("ProductsAttributes");

                    b.Navigation("Productsdetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ProductsOption", b =>
                {
                    b.Navigation("CartAttributes");

                    b.Navigation("ProductsAttributes");

                    b.Navigation("ProductsOptionsValuesMappings");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.ProductsOptionsValue", b =>
                {
                    b.Navigation("CartAttributes");

                    b.Navigation("ProductsAttributes");

                    b.Navigation("ProductsOptionsValuesMappings");
                });

            modelBuilder.Entity("Platinum.Catalog.Core.Entities.Review", b =>
                {
                    b.Navigation("ReviewsDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
